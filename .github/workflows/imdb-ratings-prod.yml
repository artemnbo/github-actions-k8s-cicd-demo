name: 'imdb-ratings-prod'

on:
  release:
    types: [created]
    
env:
  API_KEY: ${{ secrets.API_KEY }}
  NAMESPACE: "production"
  KUBECONFIG: "/tmp/kubeconfig"

jobs:
  test:
    name: 'test'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.10.4
      - name: 'Run Unit Tests'
        working-directory: imdb-ratings
        run: |
           pip install -r requirements.txt && pytest --cov=.

  analyze:
    name: 'analyze'
    runs-on: ubuntu-latest
    permissions: 
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: [ 'python' ]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v2
      with:
        languages: ${{ matrix.language }}

    - name: Autobuild
      uses: github/codeql-action/autobuild@v2

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2
  
  build:
    name: 'build'
    runs-on: ubuntu-latest
    needs: [analyze, test]
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Set release version env
        run: echo "RELEASE_VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV
      - name: Build and push
        uses: docker/build-push-action@v3
        with:
          context: ./imdb-ratings
          push: true
          tags: bondblaze/imdb-ratings:${{ env.RELEASE_VERSION }}

  security-scan:
    name: 'security-scan'
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Set release version env
        run: echo "RELEASE_VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV

      - name: 'Scan image against vulnerabilities'
        continue-on-error: false
        uses: azure/container-scan@v0
        with:
          image-name: bondblaze/imdb-ratings:${{ env.RELEASE_VERSION }}
          severity-threshold: HIGH

  deploy:
    name: 'deploy'
    needs: [security-scan]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set release version env
        run: echo "RELEASE_VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV

      - name: 'Run Helm'
        run: |
          touch $KUBECONFIG
          cat > $KUBECONFIG <<< '${{ secrets.KUBECONFIG_SA_KEY }}'
          
          kubectl create namespace $NAMESPACE || true
          
          mkdir ./deploy/helm/charts/imdb-ratings/secrets || true
          echo "API_KEY=$API_KEY" > ./deploy/helm/charts/imdb-ratings/secrets/dotenv.credentials
          sed -i -e "s/{{APP_VERSION_TAG}}/$RELEASE_VERSION/g" ./deploy/helm/charts/imdb-ratings/Chart.yaml

          helm upgrade imdb-ratings ./deploy/helm/charts/imdb-ratings --install --namespace="$NAMESPACE" -f ./deploy/helm/environments/prod.values.yaml --set=image.tag="$RELEASE_VERSION"
          helm status imdb-ratings --namespace="$NAMESPACE" || true